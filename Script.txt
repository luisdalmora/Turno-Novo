-- Tabela Usuarios
-- Armazena as informações dos usuários do sistema.
-- Login será por username e senha.
CREATE TABLE Usuarios (
    id_usuario INT IDENTITY(1,1) PRIMARY KEY,
    nome_completo VARCHAR(255) NOT NULL,
    username VARCHAR(100) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL, -- Considere adicionar UNIQUE (CREATE UNIQUE INDEX UQ_Usuarios_Email ON Usuarios(email) WHERE email IS NOT NULL AND email <> '';) se o email precisar ser único para fins de recuperação ou comunicação.
    senha VARCHAR(255) NOT NULL, -- Lembre-se de armazenar a senha como HASH
    data_cadastro DATETIME NOT NULL DEFAULT GETDATE()
);
GO

-- Tabela Colaboradores
-- Armazena as informações dos colaboradores.
CREATE TABLE Colaboradores (
    id_colaborador INT IDENTITY(1,1) PRIMARY KEY,
    nome_colaborador VARCHAR(255) NOT NULL,
    email_colaborador VARCHAR(255) NULL,
    cargo VARCHAR(100) NULL,
    departamento VARCHAR(100) NULL,
    status_colaborador VARCHAR(50) NOT NULL DEFAULT 'Ativo', -- Ex: Ativo, Inativo, Férias
    id_usuario_cadastro INT NULL, -- Pode ser NULL se o cadastro não for atrelado a um usuário específico ou se o usuário for deletado
    CONSTRAINT FK_Colaboradores_UsuarioCadastro FOREIGN KEY (id_usuario_cadastro) REFERENCES Usuarios(id_usuario) ON DELETE SET NULL -- Define como NULL se o usuário for deletado
);
GO

-- Tabela Tipos_Turno_Ausencia
-- Armazena os diferentes tipos de turnos e ausências.
CREATE TABLE Tipos_Turno_Ausencia (
    id_tipo_turno_ausencia INT IDENTITY(1,1) PRIMARY KEY,
    descricao_tipo VARCHAR(100) NOT NULL UNIQUE,
    categoria_tipo VARCHAR(50) NULL, -- Ex: 'Turno de Trabalho', 'Ausência Programada', 'Ausência Não Programada', 'Atividade Laboral'
    ativo BIT NOT NULL DEFAULT 1 -- 1 para Ativo, 0 para Inativo
);
GO

-- Tabela Turnos_Ausencias
-- Controla os turnos de trabalho e as ausências dos colaboradores.
CREATE TABLE Turnos_Ausencias (
    id_escala INT IDENTITY(1,1) PRIMARY KEY,
    id_colaborador INT NOT NULL,
    id_tipo_turno_ausencia INT NOT NULL,
    data_escala DATE NOT NULL,
    hora_inicio TIME NULL,
    hora_fim TIME NULL,
    observacoes VARCHAR(MAX) NULL,
    id_usuario_criacao INT NOT NULL,
    data_criacao DATETIME NOT NULL DEFAULT GETDATE(),
    data_modificacao DATETIME NULL, -- Para SQL Server, a atualização automática deste campo geralmente é feita via TRIGGER ou pela aplicação.

    CONSTRAINT FK_TurnosAusencias_Colaborador FOREIGN KEY (id_colaborador) REFERENCES Colaboradores(id_colaborador) ON DELETE CASCADE, -- Se o colaborador for deletado, suas escalas também serão.
    CONSTRAINT FK_TurnosAusencias_Tipo FOREIGN KEY (id_tipo_turno_ausencia) REFERENCES Tipos_Turno_Ausencia(id_tipo_turno_ausencia),
    CONSTRAINT FK_TurnosAusencias_UsuarioCriacao FOREIGN KEY (id_usuario_criacao) REFERENCES Usuarios(id_usuario) ON DELETE NO ACTION -- Impede a deleção de um usuário que criou escalas (ou defina SET NULL se preferir)
);
GO

-- Tabela ScriptsSQL
-- Armazena os scripts SQL personalizados.
CREATE TABLE ScriptsSQL (
    id_script INT IDENTITY(1,1) PRIMARY KEY,
    titulo_script VARCHAR(255) NOT NULL,
    conteudo_script VARCHAR(MAX) NOT NULL,
    id_usuario_criacao INT NOT NULL,
    data_criacao DATETIME NOT NULL DEFAULT GETDATE(),
    data_modificacao DATETIME NULL, -- Para SQL Server, a atualização automática deste campo geralmente é feita via TRIGGER ou pela aplicação.

    CONSTRAINT FK_ScriptsSQL_UsuarioCriacao FOREIGN KEY (id_usuario_criacao) REFERENCES Usuarios(id_usuario) ON DELETE NO ACTION -- Impede a deleção de um usuário que criou scripts (ou defina SET NULL se preferir)
);
GO

----------------------------------------------------
-- INSERTS INICIAIS PARA Tipos_Turno_Ausencia
----------------------------------------------------
INSERT INTO Tipos_Turno_Ausencia (descricao_tipo, categoria_tipo, ativo) VALUES
('Turno Regular', 'Turno de Trabalho', 1),
('Folga Semanal', 'Ausência Programada', 1),
('Férias', 'Ausência Programada', 1),
('Atestado Médico', 'Ausência Justificada', 1),
('Consulta Odontológica', 'Ausência Justificada', 1),
('Implantação de Sistema', 'Atividade Laboral', 1),
('Mal-estar', 'Ausência Não Programada', 1),
('Licença Maternidade/Paternidade', 'Ausência Programada', 1),
('Licença Não Remunerada', 'Ausência Programada', 1),
('Treinamento', 'Atividade Laboral', 1),
('Compensação Horas', 'Ausência Programada', 1),
('Turno Extra', 'Turno de Trabalho', 1);
GO

-- Exemplo de Trigger para data_modificacao na tabela Turnos_Ausencias
CREATE TRIGGER TRG_TurnosAusencias_UpdateModificacao
ON Turnos_Ausencias
AFTER UPDATE
AS
BEGIN
    IF TRIGGER_NESTLEVEL() > 1
        RETURN;

    UPDATE ta
    SET data_modificacao = GETDATE()
    FROM Turnos_Ausencias ta
    INNER JOIN inserted i ON ta.id_escala = i.id_escala;
END;
GO


PRINT 'Tabelas criadas e Tipos_Turno_Ausencia populada com dados iniciais.';